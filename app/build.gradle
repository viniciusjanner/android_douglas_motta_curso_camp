plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.devtools.ksp'
}

apply from: '../config/detekt/detekt.gradle'

def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    signingConfigs {
        release {
            storeFile file('\\..\\store\\marvel_app_key_store.jks')
            storePassword '123456'
            keyAlias 'marvel_app_key_alias'
            keyPassword '123456'
        }
    }

    defaultConfig {
        applicationId "com.example.marvelapp"
        minSdkVersion 21
        targetSdkVersion 33
        compileSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "PUBLIC_KEY", apikeyProperties['PUBLIC_KEY']
        buildConfigField "String", "PRIVATE_KEY", apikeyProperties['PRIVATE_KEY']
        buildConfigField "String", "BASE_URL", '"https://gateway.marvel.com/v1/public/"'

        testInstrumentationRunner "com.example.marvelapp.CustomTestRunner"

        // O argumento a seguir faz com que o Android Test Orchestrator execute seu
        // comando "pm clear" após cada chamada de teste. Este comando garante
        // que o estado do aplicativo é completamente limpo entre os testes.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            debuggable true
        }
        staging {
            initWith debug
            applicationIdSuffix '.staging'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-rules-staging.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        // freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"] // deprecated
    }

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        lintConfig = file("$rootDir/android-lint.xml")
        disable 'MissingTranslation'
        disable "RtlHardcoded"
        abortOnError true
    }
}

dependencies {
    implementation project(':core')

    // AndroidX
    implementation "androidx.core:core-ktx:1.10.1"
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    // Material design
    implementation "com.google.android.material:material:1.9.0"

    // legacy
    implementation "androidx.legacy:legacy-support-v4:1.0.0"

    // Navigation
    def nav_version = '2.6.0' // A versão '2.7.0' requer compileSdk 34
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // ViewModel and LiveData
    def lifecycle_version = "2.6.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    ksp "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Room
    def room_version = "2.5.2"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-paging:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // Glide
    def glide_version = "4.15.1"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    ksp "com.github.bumptech.glide:compiler:$glide_version"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:32.2.0")
    // implementation "com.google.firebase:firebase-analytics-ktx"
    implementation "com.google.firebase:firebase-analytics:21.3.0"

    // Other Libs
    implementation "com.facebook.shimmer:shimmer:0.5.0"
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // Unit tests
    testImplementation project(':testing')
    testImplementation "androidx.room:room-testing:$room_version"

    //......................................................................................
    // Instrumentation tests

    androidTestImplementation "androidx.test.ext:junit:1.1.5"

    def espressoVersion = "3.5.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"

    debugImplementation "androidx.fragment:fragment-testing:1.6.1"

    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kspAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:4.11.0"

    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestUtil "androidx.test:orchestrator:1.4.2"

    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
}
